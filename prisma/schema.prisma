// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean    @default(false)
    isWhitelisted Boolean    @default(false)
    chats         chat[]
    accounts      Account[]
    sessions      Session[]
    messages      messages[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model chat {
    id              String     @id @default(cuid())
    name            String
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    totalTokens     Int        @default(0)
    totalGpt3tokens Int?       @default(0)
    totalGpt4tokens Int?       @default(0)
    messages        messages[]
    User            User?      @relation(fields: [userId], references: [id])
    userId          String?
}

model messages {
    id        String   @id @default(cuid())
    role      Role
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    message   String   @db.Text
    tokens    Int      @default(0)
    userId    String?
    User      User?    @relation(fields: [userId], references: [id])
    chat      chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId    String
}

enum Role {
    user
    system
    assistant
}
